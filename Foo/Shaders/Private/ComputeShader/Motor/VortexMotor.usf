// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"

// #define XAxisTexel 32
// #define YAxisTexel 16
// #define ZAxisTexel 32

// #define MotorDataMaxCount 64
#define PosToMeter 0.01

Texture3D<float> InXAxisTexture;  //texture for special dimension (x or y or z)
Texture3D<float> InYAxisTexture;  //texture for special dimension (x or y or z)
Texture3D<float> InZAxisTexture;  //texture for special dimension (x or y or z)

// FVortexMotorUniformData
// {
//     uint NumMotors;
//     float MaxVelocity;
//     float3 MetersPerTexel;
//     float3 InPlayerWorldSpacePos;
//     float MotorRadius[MotorDataMaxCount];
//     float3 MotorWorldSpacePos[MotorDataMaxCount];
//     float3 MotorWindVelocity[MotorDataMaxCount];
// }
// FVortexMotorUniformData VortexMotorData;


RWTexture3D<float> OutXAxisTexture;
RWTexture3D<float> OutYAxisTexture;
RWTexture3D<float> OutZAxisTexture;

float LimitInMaxVelocity(float Velocity)
{
    return max(min(Velocity,VortexMotorData.MaxVelocity),-VortexMotorData.MaxVelocity);
}


void ModifyVelocityInTexture(uint3 GridPos,float3 WindVelocity)
{
    OutXAxisTexture[GridPos.xzy] =  LimitInMaxVelocity(InXAxisTexture[GridPos.xzy] + WindVelocity.x);//InXAxisTexture[GridPos.xzy] + WindVelocity.x;
    OutYAxisTexture[GridPos.xzy] =  LimitInMaxVelocity(InYAxisTexture[GridPos.xzy] + WindVelocity.y);//InYAxisTexture[GridPos.xzy] + WindVelocity.y;
    OutZAxisTexture[GridPos.xzy] =  LimitInMaxVelocity(InZAxisTexture[GridPos.xzy] + WindVelocity.z);//InZAxisTexture[GridPos.xzy] + WindVelocity.z;
}

[numthreads(32,32,1)]
void MainCS(uint3 ThreadId : SV_DispatchThreadID)
{
    float SizeX,SizeY,SizeZ;
    OutXAxisTexture.GetDimensions(SizeX,SizeY,SizeZ);
    
    uint3 GridPlayerPos = uint3(SizeX * 0.5f,SizeZ * 0.5f,SizeY * 0.5f);

    for(int y = 0; y < SizeZ;++y)
    {
        uint3 GridPos = uint3(ThreadId.x,y,ThreadId.y);
        
        for(int i = 0;i < VortexMotorData.NumMotors;++i)
        {
            float3 MotorPos = VortexMotorData.MotorWorldSpacePos[i];
            float3 Velocity = VortexMotorData.MotorWindVelocity[i];
            float Radius = VortexMotorData.MotorRadius[i];
            
            float3 GridMotorPos = (MotorPos - VortexMotorData.InPlayerWorldSpacePos) * PosToMeter * DirectionalMotorData.MetersPerTexel + GridPlayerPos;
            float3 WindVelocity = Velocity;
            float3 deltaPos = GridPos - GridMotorPos;
            
            if(length( deltaPos) < Radius)
            {
                ModifyVelocityInTexture(GridPos,WindVelocity);
            }
        }
    }
}