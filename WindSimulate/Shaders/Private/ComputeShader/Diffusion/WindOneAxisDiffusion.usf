// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
    LensDistortionUVGeneration.usf: Generate lens distortion and undistortion
    UV displacement map into a render target.

    The pixel shader directly compute the distort viewport UV to undistort
    viewport UV displacement using Sv_Position and the reference equations and
    store them into the red and green channels.

    However to avoid resolving with a ferrari method, or doing a newton method
    on the GPU to compute the undistort viewport UV to distort viewport UV
    displacement, this couple of shaders works as follow: The vertex shader
    undistort the grid's vertices, and pass down to the pixel shader the viewport
    UV of where they should have been on screen without undistortion. The pixel
    shader can then generate the undistort viewport UV to distort viewport UV
    displacement by just subtracting the pixel's viewport UV.
=============================================================================*/

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"

// #define MetersPerTexel float3(1,2,1)
#define PosToMeter 0.01
#define WINDTEX3D_ZLAYER_COUNT 16

Texture3D<float> InTexture;  //texture for special dimension (x or y or z)

//FWindVelocityFieldData
// {
//      float3 InPosDelta;
//      float InMaxWindVelocity;
//      float OriginalAlpha
//      float BetaNearAdd;
//      float3 MetersPerTexel;
//     
// }
// FWindVelocityFieldData WindVelocityData; 

RWTexture3D<float> OutTexture;  //out result texture for special dimension (x or y or z)

float ReadWindVelocityInTexture(uint3 GridPos,float3 GridPosDelta,int3 GridDirection)
{
    int3 GridCoorfinateFixed = floor(GridPos - GridPosDelta + GridDirection);
    return InTexture[GridCoorfinateFixed.xzy];
}

void WriteWindVelocityToTexture(uint3 GridPos,float valNew)
{
    OutTexture[GridPos.xzy] = valNew;
}

[numthreads(32,32,1)]
void MainCS(uint3 ThreadId : SV_DispatchThreadID)
{
    // float SizeX,SizeY,SizeZ;
    // InTexture.GetDimensions(SizeX,SizeY,SizeZ);
    
    int3 GridPosDelta = WindVelocityData.InPosDelta * WindVelocityData.MetersPerTexel * PosToMeter;
    
    for(int y = 0; y < WINDTEX3D_ZLAYER_COUNT;++y)
    {
        uint3 GridPos = uint3(ThreadId.x,y,ThreadId.y);     //32x32 thread group,
        
        float valOrignal = ReadWindVelocityInTexture(GridPos,GridPosDelta,int3(0,0,0));
        float valFront = ReadWindVelocityInTexture(GridPos,GridPosDelta,int3(1,0,0));
        float valBack = ReadWindVelocityInTexture(GridPos,GridPosDelta,int3(-1,0,0));
        float valLeft = ReadWindVelocityInTexture(GridPos,GridPosDelta,int3(0,-1,0));
        float valRight = ReadWindVelocityInTexture(GridPos,GridPosDelta,int3(0,1,0));
        float valDown = ReadWindVelocityInTexture(GridPos,GridPosDelta,int3(0,0,1));
        float valUp = ReadWindVelocityInTexture(GridPos,GridPosDelta,int3(0,0,-1));
        
        float valNew = (valOrignal * WindVelocityData.OriginalAlpha + valFront + valBack + valLeft + valRight + valDown + valUp) * WindVelocityData.BetaNearAdd;

        valNew = max(-WindVelocityData.InMaxWindVelocity,min(WindVelocityData.InMaxWindVelocity,valNew));

        // valNew = valOrignal + 0.5;
        WriteWindVelocityToTexture(GridPos,valNew);
        // WriteWindVelocityToTexture(GridPos,1);
    }
}