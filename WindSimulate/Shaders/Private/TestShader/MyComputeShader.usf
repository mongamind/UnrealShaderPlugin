// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
    LensDistortionUVGeneration.usf: Generate lens distortion and undistortion
    UV displacement map into a render target.

    The pixel shader directly compute the distort viewport UV to undistort
    viewport UV displacement using Sv_Position and the reference equations and
    store them into the red and green channels.

    However to avoid resolving with a ferrari method, or doing a newton method
    on the GPU to compute the undistort viewport UV to distort viewport UV
    displacement, this couple of shaders works as follow: The vertex shader
    undistort the grid's vertices, and pass down to the pixel shader the viewport
    UV of where they should have been on screen without undistortion. The pixel
    shader can then generate the undistort viewport UV to distort viewport UV
    displacement by just subtracting the pixel's viewport UV.
=============================================================================*/

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"

RWTexture2D<float4> OutTexture;

[numthreads(32,32,1)]
void MainCS(uint3 ThreadId : SV_DispatchThreadID)
{
    float SizeX,SizeY;
    OutTexture.GetDimensions(SizeX,SizeY);
    
    float2 iResolution = float2(SizeX,SizeY);
    float2 uv = (ThreadId.xy / iResolution.xy) - 0.5;
    
    float iGlobalTime = FMyCSUniform.GlobalTime;
    
    float t = iGlobalTime * 0.1 + ((0.25 + 0.05 * sin(iGlobalTime * 0.1)) / (length(uv.xy) + 0.07)) * 2.2;
    float si = sin(t);
    float co = cos(t);
    float2x2 ma = {co,si,-si,co};
    
    float v1,v2,v3 ;
    v1 = v2 = v3 = 0.0;
    
    float s = 0.0;
    for(int i = 0; i < 90;i++)
    {
        float3 p = s * float3(uv,0.0);
        p.xy = mul(p.xy,ma);
        p += float3(0.22,0.3,s - 1.5 - sin(iGlobalTime * 0.13) * 0.1);
    
        for(int j = 0; j < 8; j++)
            p = abs(p) / dot(p,p) - 0.659;
    
        v1 += dot(p,p) * 0.0015 * (1.8 + sin(length(uv.xy * 13.0) + 0.5 - iGlobalTime * 0.2));
        v2 += dot(p,p) * 0.0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iGlobalTime * 0.3));
        v3 += length(p.xy * 10.0) * 0.0003;
        s += 0.035;
    }
    
    float len = length(uv);
    v1 *= lerp(0.7,0.0,len);
    v2 *= lerp(0.5,0.0,len);
    v3 *= lerp(0.9,0.0,len);
    
    float3 col = float3(v3 * (1.5 + sin(iGlobalTime * 0.2) * 0.4), (v1 + v3) * 0.3,v2) + lerp(0.2,0.0,len) * 0.85 + lerp(0.0,0.6,v3) * 0.3;
    
    float3 powered = pow(abs(col),float3(1.2,1.2,1.2));
    float3 minimized = min(powered,1.0);
    float4 outputColor = float4(minimized,1.0);
    
    OutTexture[ThreadId.xy] = outputColor;
    
}